apply plugin: 'org.springframework.boot'
apply from: 'http://dl.bintray.com/scalding/generic/waroverlay.gradle'
apply from: 'https://raw.githubusercontent.com/apereo/cas/5.2.x/gradle/overrides.gradle'

apply plugin: 'eclipse'
apply plugin: 'idea'

eclipse {
    classpath {
       downloadSources = true
       downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}


bootRepackage {
    enabled = false
}

springBoot  {
    mainClass = "org.springframework.boot.loader.WarLauncher"
}

bootRun {
    addResources = true
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
}

dependencies {
    compile "org.apereo.cas:cas-server-webapp-tomcat:${project.'cas.version'}@war"
}

task copyConfig(type: Copy, description: "Copy CAS configuration over to /etc/cas/config") {
    doLast {
        from "${project.rootDir}/etc/cas/config"
        into '/etc/cas/config'

        println "Copied configuration files into /etc/cas/config"
    }
}

war {
    dependsOn copyConfig
    baseName 'cas'
    includeWarJars = true
    entryCompression = ZipEntryCompression.STORED
    manifest {
        from manifestFile()
    }
}

task explodeWar(type: Copy, group: "build", description: "Explodes the cas.war") {
    doLast {
        from zipTree(project.war.outputs.files.singleFile)
        into "${buildDir}/cas"
        println "CAS web application artifact exploded into [cas/build/cas]"
    }
}

File manifestFile() {
    def warfile = configurations.runtime.asFileTree.matching {
        include '**/*.war'
    }
    def manifest = zipTree(warfile.singleFile).matching {
        include '**/*.MF'
    }
    def dst = new File("${project.rootDir}/etc/cas/MANIFEST.MF")
    dst.delete()
    dst << manifest.singleFile.text
    return dst
}

task run(group: "build", description: "Run the CAS web application in embedded container mode") {
    dependsOn build
    doLast {
        def casRunArgs = Arrays.asList(project.'cas.run.jvmArgs'.split(" "))
        javaexec {
            main = "-jar";
            jvmArgs = casRunArgs
            args = ["build/libs/cas.war"]
            
            log.info "Started ${commandLine}"
        }
    }
}

task debug(group: "build", description: "Debug the CAS web application in embedded mode on port 5005") {
    dependsOn build
    doLast {
        def casDebugArgs = Arrays.asList(project.'cas.debug.jvmArgs'.split(" "))

        javaexec {
            main = "-jar";
            jvmArgs = casDebugArgs
            args = ["build/libs/cas.war"]
            
            log.info "Started ${commandLine}"
        }
    }
}
